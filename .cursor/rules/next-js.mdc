---
alwaysApply: true
---
You are an expert in JavaScript React Node.js Nextjs App Router TypeScript Zustand Shadcn UI Radix UI Tailwind and Stylus

Scope
* Use Nextjs App Router with React Server Components by default
* Embed a Chrome MV3 extension within the repository
* Prefer server rendering and server actions
* Limit use client to leaf components that require browser APIs or realtime interactivity

Language and Style
* Use TypeScript across app and extension
* Follow Standard JS style with two space indentation single quotes and no semicolons except when required
* Enforce camelCase for variables and functions and PascalCase for React components
* Always use strict equality and space after keywords and around operators
* Disallow unused variables and keep else on the same line
* Use curly braces for multi line conditionals

Linting and Formatting
* Use ESLint Standard with TypeScript
* Use Prettier configured for no semicolons and single quotes

Project Structure
* Favor named exports
* Use lowercase directory names for example components auth wizard
* In each component folder order exported component then subcomponents then helpers then static content

React Practices
* Use functional components with the function keyword
* Use hooks at the top level only from React functions
* Extract reusable logic into custom hooks
* Use React memo only when it prevents real re renders
* Use useCallback for callbacks and useMemo for expensive work
* Avoid inline functions in render
* Prefer composition and children
* Use React lazy and Suspense for code splitting
* Use refs sparingly for DOM access
* Prefer controlled components
* Add error boundaries around client subtrees
* Clean up effects
* Use short circuit and ternary for conditional rendering

State Management
* Use Zustand for global state
* Lift state when needed
* Use context only to avoid deep prop drilling
* Use nuqs for URL search parameter state

Styling
* Use Shadcn UI and Radix UI for component foundations
* Use Tailwind for utilities and layout mobile first
* For complex component styles use Stylus CSS Modules with ComponentName.module.styl next to the component
* Use camelCase class names variables mixins and nesting with low specificity
* Never use the @apply directive
* Combine Tailwind utilities with Stylus modules when it improves clarity

Data Fetching and Rendering
* Follow official Nextjs guidance for data fetching rendering and routing
* Prefer server actions and caching
* Do not fetch in client components unless a browser API requires it

Performance
* Minimize use client useEffect and useState
* Wrap client components in Suspense with fallbacks
* Use dynamic import for non critical UI
* Optimize images with next image modern formats explicit sizes and lazy loading
* Enable route based code splitting
* Keep global styles minimal
* Meet Web Vitals targets for LCP CLS and TBT

Forms and Validation
* Use controlled inputs
* For complex forms use react hook form
* Validate with Zod or Joi on client and server

Error Handling
* Handle errors and edge cases first with guard clauses and early returns
* Model expected errors as return values in server actions
* Log errors with context and show user friendly messages

Security and Privacy
* Sanitize user content
* Avoid dangerouslySetInnerHTML except with sanitized content
* Enforce a strict Content Security Policy for MV3 and the app
* Use secure messaging between extension parts
* Handle cross origin requests safely
* Encrypt sensitive data at rest when required

Accessibility
* Use semantic HTML and proper ARIA attributes
* Ensure keyboard navigation focus management and sufficient color contrast

Internationalization
* Use next i18next or react intl in the app
* Use chrome i18n with _locales and support RTL and regional formats in the extension

Testing and Debugging
* Write unit tests with Jest and React Testing Library
* Add integration tests for critical flows
* Use snapshot tests sparingly
* Use Chrome DevTools for extension debugging
* Test cross browser where APIs allow

Chrome MV3 Architecture
* Follow MV3 strictly with a service worker background
* Split code into popup background content scripts and shared utils
* Use chrome.action for the toolbar entry and chrome.alarms for schedules
* Use chrome.storage chrome.tabs and chrome.runtime with Promises
* Keep permissions minimal and request optional permissions at runtime
* Configure web_accessible_resources carefully
* Build popup UI responsive accessible and lightweight

Extension Performance
* Minimize resource usage and avoid long running tasks in the service worker
* Cache wisely and monitor CPU and memory during development

Publishing and Maintenance
* Prepare clear store listing and screenshots
* Provide a privacy policy
* Implement update handling and migrations when needed
* Capture user feedback
* Maintain concise documentation and change management

Naming Conventions
* Directories use lowercase
* Variables and functions use camelCase
* React components and constructors use PascalCase

Key Conventions
* Prefer server components and Nextjs SSR
* Never use the @apply directive
* Use nuqs for URL search state
* Follow Nextjs docs for data rendering and routing
* Apply the principle of least privilege for extension permissions

Output Expectations
* Provide clear modular code with types and JSDoc where helpful
* Include robust error handling
* Ensure secure behavior and cross browser compatibility where possible
* Keep code maintainable scalable and production ready
